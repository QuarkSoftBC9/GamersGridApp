@model GamersGridApp.ViewModels.MessageBoardViewModel
@Styles.Render("~/Content/SiteCss")

@{
    ViewBag.Title = "MessageBoard";
}


<div class="container">
    <h3 class=" text-center">Messaging</h3>
    <div class="messaging">
        <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>Recent</h4>
                    </div>
                    <div class="srch_bar">
                        <div class="stylish-input-group">
                            <input type="text" class="search-bar" placeholder="Search" id="SearchUserToMessage">
                            <span class="input-group-addon customclassmsg">
                                <button type="button"> <i class="fa fa-search" aria-hidden="true"></i> </button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="inbox_chat">
                    @if (Model.MessageChats != null)
                    {
                        foreach (var messagechat in Model.MessageChats)
                        {
                            <div class="chat_list chatLeft" id="@messagechat.ID" @*onclick="ShowChat(@messagechat.ID,@Model.User.UserID)*@>
                                <div class="chat_people">
                                    <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                                    <div class="chat_ib">

                                        <h5>@messagechat.Name</h5>
                                        @*@if (messagechat.ChatHistory.Count != 0)
                                            {
                                            <h5>@messagechat.ChatHistory.Last().User.NickName <span class="chat_date">Dec 25</span></h5>
                                            <p>
                                                @messagechat.ChatHistory.OrderByDescending(m => m.Time).Last().MessageString
                                            </p>
                                            }*@
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="mesgs" id="chatbox">
                <div class="msg_history" id="messageboard">
                    @if (Model.MessageChats != null)
                    {
                        foreach (var message in Model.MessageChats.FirstOrDefault(c => c.ID == Model.CurrentChatID).ChatHistory.OrderBy(c => c.Time))
                        {
                            if (Model.CurrentUserNickName != message.User.NickName)
                            {
                                <div class="incoming_msg">
                                    <div class="incoming_msg_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                                    <div class="received_msg">
                                        <div class="received_withd_msg">
                                            <p>
                                                @message.MessageString
                                            </p>
                                            <span class="time_date"> @message.Time</span>
                                        </div>
                                    </div>
                                </div>

                            }
                            else
                            {
                                <div class="outgoing_msg">
                                    <div class="sent_msg">
                                        <p>
                                            @message.MessageString
                                        </p>
                                        <span class="time_date">  @message.Time</span>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
                <div class="type_msg">
                    <div class="input_msg_write">
                        @Html.TextBox("NewText", "", new { @id = "txtMessage", @class = "write_msg", @autocomplete = "off" })
                        @*<input type="text" id="type" class="write_msg" autocomplete="off" />*@
                        <button class="msg_send_btn" type="button" data-chat-id="@Model.CurrentChatID" id="btnSendMessage"><i class="fa fa-paper-plane-o" aria-hidden="true"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{

    <script src="/signalr/hubs"></script>

    <script>

        var MessageChats = [];

        $(document).ready(function () { //This section will run whenever we call Chat.cshtml page

            var objHub = $.connection.chatHub;
            var chatid = $("#btnSendMessage").attr("data-chat-id");


              var searchUsers = new Bloodhound({ //*
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('title'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: {
            url: '/api/follows?query=%QUERY',
            wildcard: '%QUERY'
        }
        });


        $("#SearchUserToMessage").typeahead({
            hint: true,
            minLength: 2,
            highlight: true
        },
        {
            name: 'nickName',
            display: 'nickName',
            source: searchUsers
        })
            .on("typeahead:select", function (e, user) {

                console.log("ASDASDASDAS")
                $.ajax({
                    url: '/Message/FindMessageChats',
                    data: { ID: user.id },
                    type: 'GET',                    
                    success: function (data) {
                        console.log("ASDASDa")
                        $('#chatbox').replaceWith(data);
                    }
                });        



        });


            objHub.client.getMessages = function (userName, message, time) {
                var div1class = "";
                var div2class = "";
                if (userName == "@Model.CurrentUserNickName") {

                    div1class = "outgoing_msg";
                    div2class = "sent_msg";
                }
                else {
                    div1class = "received_msg";
                    div2class = "received_withd_msg";
                };
                $("#txtMessage").val('');
                $('#messageboard').append(' <div class="' +
                    div1class +
                    '"><div class="' + div2class + '"> <p>' + message + '</p> <span class="time_date">' + time + '</div> </div>');

                var height = $('#messageboard')[0].scrollHeight;
                $('#messageboard').scrollTop(height);


            }



            $(document).on("click", ".msg_send_btn", function () {

                var msg = $("#txtMessage").val();
                var chatboxid = $("#btnSendMessage").attr("data-chat-id");

                if (msg.length > 0) {


                    // <<<<<-- ***** Return to Server [  SendMessageToGroup  ] *****
                    objHub.server.sendMessageToGroup("@Model.CurrentUserNickName", msg, chatboxid);
                }
                $("#txtMessage").val("");
            });


            $(".chatLeft").on("click",function (e) {

                var messageChatId = $(e.target).attr("id");

                $.ajax({
                    url: '/Message/GetPartial',
                    data: { chatId : messageChatId },
                    type: 'GET',
                    method: "replace",
                    success: function (data) {
                        $('#chatbox').replaceWith(data);
                    }
                });

                //$(".mesgs").load("/Message/GetPartial?chatId=" + messageChatId);
                objHub.server.connect(messageChatId);

            });

            $.connection.hub.start().done(function () {
                objHub.server.connect(chatid);
            });
        });
    </script>

}




<style>
    .container {
        max-width: 1170px;
        margin: auto;
    }

    img {
        max-width: 100%;
    }

    .inbox_people {
        background: #f8f8f8 none repeat scroll 0 0;
        float: left;
        overflow: hidden;
        width: 40%;
        border-right: 1px solid #c4c4c4;
    }

    .inbox_msg {
        border: 1px solid #c4c4c4;
        clear: both;
        overflow: hidden;
    }

    .top_spac {
        margin: 20px 0 0;
    }


    .recent_heading {
        float: left;
        width: 40%;
    }

    .srch_bar {
        display: inline-block;
        text-align: right;
        width: 60%;
    }

    .headind_srch {
        padding: 10px 29px 10px 20px;
        overflow: hidden;
        border-bottom: 1px solid #c4c4c4;
    }

    .recent_heading h4 {
        color: #05728f;
        font-size: 21px;
        margin: auto;
    }

    .srch_bar input {
        border: 1px solid #cdcdcd;
        border-width: 0 0 1px 0;
        width: 80%;
        padding: 2px 0 4px 6px;
        background: none;
    }

    .srch_bar .input-group-addon button {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        padding: 0;
        color: #707070;
        font-size: 18px;
    }

    .srch_bar .input-group-addon {
        margin: 0 0 0 -27px;
    }

    .chat_ib h5 {
        font-size: 15px;
        color: #464646;
        margin: 0 0 8px 0;
    }

        .chat_ib h5 span {
            font-size: 13px;
            float: right;
        }

    .chat_ib p {
        font-size: 14px;
        color: #989898;
        margin: auto
    }

    .chat_img {
        float: left;
        width: 11%;
    }

    .chat_ib {
        float: left;
        padding: 0 0 0 15px;
        width: 88%;
    }

    .chat_people {
        overflow: hidden;
        clear: both;
    }

    .chat_list {
        border-bottom: 1px solid #c4c4c4;
        margin: 0;
        padding: 18px 16px 10px;
    }

    .inbox_chat {
        height: 550px;
        overflow-y: scroll;
    }

    .active_chat {
        background: #ebebeb;
    }

    .incoming_msg_img {
        display: inline-block;
        width: 6%;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .received_withd_msg p {
        background: #ebebeb none repeat scroll 0 0;
        border-radius: 3px;
        color: #646464;
        font-size: 14px;
        margin: 0;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .time_date {
        color: #747474;
        display: block;
        font-size: 12px;
        margin: 8px 0 0;
    }

    .received_withd_msg {
        width: 57%;
    }

    .mesgs {
        float: left;
        padding: 30px 15px 0 25px;
        width: 60%;
    }

    .sent_msg p {
        background: #05728f none repeat scroll 0 0;
        border-radius: 3px;
        font-size: 14px;
        margin: 0;
        color: #fff;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .outgoing_msg {
        overflow: hidden;
        margin: 26px 0 26px;
    }

    .sent_msg {
        float: right;
        width: 46%;
    }

    .input_msg_write input {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        color: #4c4c4c;
        font-size: 15px;
        min-height: 48px;
        width: 100%;
    }

    .type_msg {
        border-top: 1px solid #c4c4c4;
        position: relative;
    }

    .msg_send_btn {
        background: #05728f none repeat scroll 0 0;
        border: medium none;
        border-radius: 50%;
        color: #fff;
        cursor: pointer;
        font-size: 17px;
        height: 33px;
        position: absolute;
        right: 0;
        top: 11px;
        width: 33px;
    }

    .messaging {
        padding: 0 0 50px 0;
    }

    .msg_history {
        height: 516px;
        overflow-y: auto;
    }
</style>


